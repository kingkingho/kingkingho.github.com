<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL数据类型和字符集(基础一)]]></title>
    <url>%2F2019%2F03%2F20%2FMySQL-data-type-and-character-set%2F</url>
    <content type="text"><![CDATA[MySQL数据类型和字符集基础知识，基本上是从官方文档翻译而来，把自己的基础打扎实一点。 MySQL支持多种数据类型，常用包含：数值型，日期、时间型，字符串型等。 MySQL supports a number of SQL data types in several categories: numeric types, date and time types, string (character and byte) types, and spatial types. 数值型在定义整型时，M代表的是最大显示宽度，最大值为255，值得注意的是，显示宽度和类型所包含的值范围无关。在浮点型和定点型中，M表示可存储的总位数，数值类型可定义SIGNED和UNSIGEND属性，默认为SIGNED，当一个数字列指定ZEROFILL属性时，会自动增加UNSIGNED。 M indicates the maximum display width for integer types. The maximum display width is 255. Display width is unrelated to the range of values a type can contain, For floating-point and fixed-point types, M is the total number of digits that can be stored. BIT[(M)]bit类型，M表示每个值的位数，从1到64，则默认值为1。 TINYINT[(M)] [UNSIGNED] [ZEROFILL]非常小的整型， 有符号的范围是-128到127，无符号的范围是0-255 BOOL, BOOLEAN布尔类型，和TINYINT(1)类似，0代表false，1代表true，TRUE和FALSE分别是1和0的别名。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748root@localhost 22:37:41 [(none)]&gt; select IF(0, 'true', 'false');+------------------------+| IF(0, 'true', 'false') |+------------------------+| false |+------------------------+1 row in set (0.00 sec)root@localhost 22:37:45 [(none)]&gt; select IF(1, 'true', 'false');+------------------------+| IF(1, 'true', 'false') |+------------------------+| true |+------------------------+1 row in set (0.00 sec)root@localhost 22:39:48 [(none)]&gt; select IF(0=FALSE, 'true', 'false');+------------------------------+| IF(0=FALSE, 'true', 'false') |+------------------------------+| true |+------------------------------+1 row in set (0.00 sec)root@localhost 22:39:53 [(none)]&gt; select IF(1=TRUE, 'true', 'false');+-----------------------------+| IF(1=TRUE, 'true', 'false') |+-----------------------------+| true |+-----------------------------+1 row in set (0.00 sec)root@localhost 22:40:00 [(none)]&gt; select IF(2=TRUE, 'true', 'false');+-----------------------------+| IF(2=TRUE, 'true', 'false') |+-----------------------------+| false |+-----------------------------+1 row in set (0.00 sec)root@localhost 22:40:09 [(none)]&gt; select IF(2=FALSE, 'true', 'false');+------------------------------+| IF(2=FALSE, 'true', 'false') |+------------------------------+| false |+------------------------------+1 row in set (0.00 sec)# 由于2即不等于1也不等于0，所以后面2个表达式为FALSE SMALLINT/MEDIUMINT/INT/INTEGER/BIGINT(M) [UNSIGNED] [ZEROFILL]这几个类型基本相似，只不过在定义UNSIGNED或SIGNED时，各类型的取值范围不一样。 DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]M代表数字的总位数(精度)，D代表小数点的位数(刻度)，小数点和’-‘号不计入M，0&lt;=M&lt;=65，0&lt;=D&lt;=30，D的默认值为0，表示没有小数点或小数位，M的默认值为10. DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]和DECIMAL类似，为了兼容其他数据库系统。 FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]小的浮点数(单精度)，M表示总位数，D表示小数点后的位数，如果M和D忽略，值的存储受限于硬件 FLOAT(p) [UNSIGNED] [ZEROFILL]浮点数， p表示以位为单位的精度；当0&lt;=p&lt;=24时，数据类型转换为没有M和D的FLOAT类型当25&lt;=p&lt;=53时，数据类型转换为没有M和D的DOUBLE类型 。 DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]双精度浮点数，实际范围取决于操作系统或硬件。 DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL], REAL[(M,D)] [UNSIGNED] [ZEROFILL]和DOUBLE类型类似。 日期、时间型MySQL 5.6.4或以上的版本支持为TIME，DATETIME，TIMESTAMP定义小秒值，精度可到微妙(6位)，要定义一个小秒的字段，使用type_name(fsp)语法，type_name包含TIME、DATETIME、TIMESTAMP，fsp代表小秒精度，fsp的值为0到6，默认是0。 MySQL 5.6.5及以上的版本扩展了时间类型自动初始化和更新时间，每个表允许有多个TIMESTAMP字段自动更新时间，并且，该属性支持DATETIME类型。 DATE日期类型，支持的范围为’1000-01-01’到’9999-12-31’，MySQL以’YYYY-MM-DD’格式显示，同时也允许字符串和数字分配给DATE字段。 DATETIME[(fsp)]日期和时间的组合类型，支持范围’1000-01-01 00:00:00.000000’ 到 ‘9999-12-31 23:59:59.999999’，MySQL以’YYYY-MM-DD HH:MM:SS[.fraction]’格式显示值，同样支持以字符串和数值插入到DATETIME字段。 从MySQL5.6.4开始，0&lt;=fsp&lt;=6，默认为0，没有小秒部分。从MySQL5.6.5开始，可以使用DEFAULT和ON UPDATE来定义DATETIME自动初始化和更新时间。 TIMESTAMP[(fsp)]时间戳类型，范围’1970-01-01 00:00:01.000000’ UTC 到 ‘2038-01-19 03:14:07.999999’ UTC ，TIMESTAMP存储为从’1970-01-01 00:00:00’ UTC开始的秒数，不能存储’1970-01-01 00:00:00’，因为这等于0，0是表示’0000-00-00 00:00:00’。 当变量explicit_defaults_for_timestamp启用时，不会为TIMESTAMP列分配DEFAULT CURRENT_TIMESTAMP或ON UPDATE CURRENT_TIMESTAMP属性，必须明确定义，此外，任何未显式声明为NOT NULL的TIMESTAMP都允许NULL值。 当系统变量explicit_defaults_for_timestamp禁用时，服务器按照如下规则处理TIMESTAMP列： 除非另有说明，表中第一个TAMESTAMP字段(如果没有明确赋值)被定义为自动设置最近修改日期和时间。 可以使用DEFAULT CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP列定义子句指定自动初始化和更新到当前日期和时间。默认的第一个字段拥有这些属性。从MySQL 5.6.6开始，任何该类型字段都可以被定义拥有这些属性，在MySQL5.6.5之前仅有1个该类型字段支持定义这样的属性。 TIME[(fsp)]时间类型，范围是’-838:59:59.000000’ 到 ‘838:59:59.000000’，MySQL以’HH:MM:SS[.fraction]’格式显示，也支持以字符串和数值插入到TIME字段。 YEAR[(2|4)]2位数年或4位数年，默认4位数，2中定义拥有相同的范围，只是显示有差别。 字符串类型字符列比较和排序基于分配给列的排序规则。 [NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]定长字符串，在存储时始终用空格填充到指定长度，M 表示以字符为单位的列长度，M的范围为0-255，默认值为1。 注意：除非SQL MODE启用 PAD_CHAR_TO_FULL_LENGTH，否则检索CHAR值将删除尾部空格。CHAR（0）列值占用1 bit，只能取值NULL和’’。 [NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE collation_name]变长字符串，M表示字符的最大列长度，M的范围0-65535，VARCHAR的有效最大长度取决于最大行大小和字符集的使用，因为65535bytes是所有字段共用，例如，utf8下一个字符最大占用3个字节，因此utf8字符集下一个VARCHAR列最大可声明为21844个字符。当M&lt;=255时，需要额外的1byte做长度标记。当M&gt;=256时，需要额外的2bytes做长度标记。 BINARY[(M)]类似于CHAR类型，存储二进制字符串，M表示以字节为单位的列长度，默认值为1。 VARBINARY(M)类似于VARCHAR类型，存储二进制字符串，M表示以字节单位的最大列长度。 TINYBLOB最大长度255 (2^8 − 1) bytes，需要额外的1 byte标识。 BLOG[(M)]最大长度为65,535（2^16-1）字节，需要额外的2 bytes标识。 MEDIUMBLOB最大长度为16,777,215（2^24 - 1）字节，需要额外的3 bytes标识。 LONGBLOB最大长度4,294,967,295bytes或4GB (2^32−1) ，最大长度受maximum packet size和可用内存影响，需要额外的4 bytes标识。 TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]最大长度为255（2^8 - 1）个字符，需要额外的1 byte标识。 TEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]最大长度为65,535 (2^16 − 1)个字符，需要额外2 bytes标识。 MEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]最大长度为16,777,215 (2^24 − 1)个字符，需要额外的3 bytes标识。 LONGTEXT [CHARACTER SET charset_name] [COLLATE collation_name] 最大长度4,294,967,295 or 4GB (2^32 − 1)个字符，最大长度受maximum packet size和可用内存影响，需要额外的4 bytes标识。 ENUM(‘value1’,’value2’,…) [CHARACTER SET charset_name] [COLLATE collation_name]枚举类型，只能包含一个值，从多个值的列表中选择一个或者为NULL和空字符串’’。底层为整型，ENUM列最多可包含65,535个不同的元素。（实际限制小于3000.）一个表在其被视为一个组的ENUM和SET列中不能超过255个唯一元素列表定义。 SET(‘value1’,’value2’,…) [CHARACTER SET charset_name] [COLLATE collation_name]集合类型，可以包含零个或多个值，每个值都必须从值列表’value1’，’value2’中选择，… SET值在内部表示为整数，SET列最多可包含64个不同的成员。一个表在其被视为一个组的ENUM和SET列中可以包含不超过255个唯一元素列表定义。 官方数据类型说明]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS下磁盘分区]]></title>
    <url>%2F2019%2F03%2F17%2FDisk-parted-on-CentOS%2F</url>
    <content type="text"><![CDATA[众所周知，CentOS5/6/7下分区一般使用fdisk来完成。fdisk使用的是传统的MBR分区方式，无法支持为Size超过2T的硬盘进行分区，而GPT分区方式则打破了这一限制。 分步来完成分区1234567891011121314151617181920212223# 找到未分区和格式化的硬盘，不包含分区的，如 /dev/sdj shell&gt; fdisk -l# 使用parted分区shell&gt; parted /dev/sdj# 打印当前分区设备的磁盘容量大小 (parted) print# 设置磁盘分区为gpt模式 (parted) mklabel gpt # 将所有容量创建分区(parted) mkpart primary 0 -1# Warning 提示输入i(parted) WARNING: xxxx Ignore/Cancel?i# 快速格式化分区mkfs.ext4 -T largefile /dev/sdj1# 挂载shell&gt; mount -t ext4 /dev/sdj1 /disk9 一行命令完成分区操作1234567891011# CentOS 5shell&gt; parted -s /dev/sdj mklabel gpt mkpart 1 ext3 0 4T# CentOS 6shell&gt; parted -s /dev/sdj mklabel gpt mkpart 1 ext4 0 4T# 快速格式化分区mkfs.ext4 -T largefile /dev/sdj1# 挂载 shell&gt; mount -t ext4 /dev/sdj1 /disk9 最后切记要将磁盘挂载写入到fstab表中，不然服务器重启后不会自动挂载. 123# 写入fstab# /dev/sdj1 /disk9 ext4 defaults 0 1 shell&gt; vim /etc/fstab]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL账户与权限管理]]></title>
    <url>%2F2019%2F03%2F16%2FMySQL-Account-Privileges-Management%2F</url>
    <content type="text"><![CDATA[介绍MySQL账户与权限的增删改查等基础知识. 权限认证的过程step1. 从mysql.user表中验证host(连接主机), user(连接用户名)和password(连接密码)step2. 验证通过后，按照以下顺序获取权限：user表 -&gt; db表 -&gt; tables_priv表 -&gt; columns_priv表. 注意事项：user表中的权限代表对所有数据库都有权限而db表中的权限代表对部分数据库的权限。 创建账户12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#创建u1@localhost账户，密码设置为123,默认只有USAGE权限，若要其他权限需用GRANT赋权mysql&gt; CREATE USER 'u1'@'localhost' IDENTIFIED BY '123';#赋予用户u1@localhost所有库的权限.mysql&gt;GRANT ALL privileges ON *.* to 'u1'@'localhost';#赋予用户u1@localhost所有库的权限，且赋予grant权限.mysql&gt;GRANT ALL privileges ON *.* to 'u1'@'localhost' WITH GRANT OPTION;#赋予用户u1@localhost所有库的权限，且赋予grant权限,密码为123.mysql&gt;GRANT ALL privileges ON *.* to 'u1'@'localhost' IDENTIFIED BY '123' WITH GRANT OPTION;#创建账户u2，可以从任意IP登陆，只对test1库有SELECT、UPDATE权限,且密码为123mysql&gt;GRANT SELECT,UPDATE ON test1.* to 'u2'@'%' IDENTIFIED BY '123';#创建账户u3@%，赋予SUPER、PROCESS、FILE权限mysql&gt;GRANT SUPER,PROCESS,FILE ON *.* to 'u3'@'%';#修改账户密码#方法1：SET PASSWORDmysql&gt; SET PASSWORD FOR 'u2'@'%' = PASSWORD('234');#方法2：UPDATEmysql&gt; UPDATE mysql.user SET password=PASSWORD('123') WHERE USER='root' AND HOST='localhost'; mysql&gt;FLUSH PRIVILEGES;#方法3：ALTERmysql&gt;ALTER USER 'u1'@'localhost' IDENTIFIED BY ‘123’;mysql&gt;FLUSH PRIVILEGES;#方法4：linux命令行修改密码[root@localhost]# mysqladmin -uroot -p123(旧密码) password 234(新密码)#方法5：修改user表mysql&gt; INSERT INTO mysql.user (Host,User,Password) VALUES('localhost', 'u1','PASSWORD(234)');mysql&gt; FLUSH PRIVILEGES;#方法6：GRANTmysql&gt; GRANT USAGE ON *.* TO 'u1'@'localhost' IDENTIFIED BY 'xyz';# 重置root密码- 关闭mysql进程 shell&gt; kill `pidof mysqld`- 在my.cnf的[mysqld]段的增加配置 skip-grant-tables #禁用权限认证skip-networking #禁用网络认证- 登录mysql shell&gt; mysql- 刷新权限 mysql&gt; FLUSH PRIVILEGES;- 修改root密码 MySQL 5.7.6 and later:mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';MySQL 5.7.5 and earlier:mysql&gt; SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MyNewPass');- 删除配置,并重启MySQL skip-grant-tables #禁用权限认证skip-networking #禁用网络认证 注意事项 管理权限属于全局权限，不能指定单个数据库； host值可以为主机名或IP地址，或为localhost表示只允许本机登陆； 支持通配符’%’和_, %表示任意主机, _表示匹配一个字符； ‘‘@localhost表示任意账户都可以从localhost登陆； host精确匹配的原则。 查看账户123# 查看用户u1@localhost权限 mysql&gt; SHOW GRANTS FOR 'u1'@'localhost'; 权限回收123# 回收账户u1@localhost权限 mysql&gt;REVOKE SELECT ON *.* FROM 'u1'@'localhost'; 注意事项: USAGE权限不能被回收 删除账户1234567mysql&gt;DROP USER 'u1'@'localhost'; ormysql&gt;DELETE FROM mysql.user WHERE User='u1' AND HOST='localhost';mysql&gt;FLUSH PRIVILEGES;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
